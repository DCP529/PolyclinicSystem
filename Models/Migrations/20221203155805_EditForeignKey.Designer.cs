// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.ModelsDb;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(PolyclinicDbContext))]
    [Migration("20221203155805_EditForeignKey")]
    partial class EditForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoctorDbPolyclinicDb", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("DoctorId");

                    b.ToTable("DoctorDbPolyclinicDb");
                });

            modelBuilder.Entity("DoctorDbSpecializationDb", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("DoctorId");

                    b.ToTable("DoctorDbSpecializationDb");
                });

            modelBuilder.Entity("Models.ModelsDb.CityDb", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CityId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Models.ModelsDb.DoctorDb", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<decimal>("AdmissionCost")
                        .HasColumnType("numeric")
                        .HasColumnName("admission_cost");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("integer")
                        .HasColumnName("contact_number");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fio");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_description");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<Guid>("PolyclinicId")
                        .HasColumnType("uuid")
                        .HasColumnName("polyclinic_id");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.HasKey("DoctorId");

                    b.ToTable("doctror");
                });

            modelBuilder.Entity("Models.ModelsDb.PolyclinicDb", b =>
                {
                    b.Property<Guid>("PolyclinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("polyclinic_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<int>("ContactNumber")
                        .HasColumnType("integer")
                        .HasColumnName("contact_number");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("PolyclinicId");

                    b.HasIndex("CityId");

                    b.ToTable("polyclinic");
                });

            modelBuilder.Entity("Models.ModelsDb.SpecializationDb", b =>
                {
                    b.Property<Guid>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("specialization_id");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid")
                        .HasColumnName("doctor_id");

                    b.Property<int>("ExperienceSpecialization")
                        .HasColumnType("integer")
                        .HasColumnName("experience_specialization");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("SpecializationId");

                    b.ToTable("specialization");
                });

            modelBuilder.Entity("DoctorDbPolyclinicDb", b =>
                {
                    b.HasOne("Models.ModelsDb.DoctorDb", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ModelsDb.PolyclinicDb", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorDbSpecializationDb", b =>
                {
                    b.HasOne("Models.ModelsDb.DoctorDb", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ModelsDb.SpecializationDb", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ModelsDb.PolyclinicDb", b =>
                {
                    b.HasOne("Models.ModelsDb.CityDb", "City")
                        .WithMany("Polyclinics")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Models.ModelsDb.CityDb", b =>
                {
                    b.Navigation("Polyclinics");
                });
#pragma warning restore 612, 618
        }
    }
}
